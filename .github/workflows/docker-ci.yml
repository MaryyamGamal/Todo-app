name: CI/CD Pipeline (DockerHub + ECR + App Runner)

on:
  push:
    branches:
      - master

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      ECR_REPO: todo-app  # ✅ Use the actual ECR repo name here
      DOCKER_REPO: ${{ secrets.DOCKER_REPO }}
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      ECR_REPO: todo-app
      DOCKER_REPO: ${{ secrets.DOCKER_REPO }}
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    steps:
      # 📦 Checkout code
      - name: Checkout Code
        uses: actions/checkout@v3

      # 🔐 Login to Docker Hub
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      # 🔐 Configure AWS credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # 🔐 Login to Amazon ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # 🛠 Build Docker image and tag for both Docker Hub & ECR
      - name: Build and Tag Docker Image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker build -t $DOCKER_REPO:latest .
          docker tag $DOCKER_REPO:latest $ECR_REGISTRY/$ECR_REPO:latest
          docker tag $DOCKER_REPO:latest $ECR_REGISTRY/$ECR_REPO:previous

      # 🚀 Push to Docker Hub
      - name: Push to Docker Hub
        run: |
          docker push $DOCKER_REPO:latest

      # 🚀 Push to Amazon ECR
      - name: Push to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker push $ECR_REGISTRY/$ECR_REPO:latest
          docker push $ECR_REGISTRY/$ECR_REPO:previous

      # ✅ Notify on success
      - name: Notify Success
        if: ${{ success() && secrets.SLACK_WEBHOOK_URL != '' }}
        run: |
          curl -X POST -H "Content-Type: application/json" \
            -d '{"text":"✅ CI/CD: Build & deploy succeeded! App Runner will auto-deploy."}' \
            ${{ secrets.SLACK_WEBHOOK_URL }}



// Example for Express.js (Node.js)
app.get("/", (req, res) => {
  res.status(404).send("Simulated 404 error");
});
